/* The following code was generated by JFlex 1.4.1 on 3/10/05 11:21 AM */

/**
 *  FileScanner class
 *  tokenizes an input file given a delimiter based on 
 *  set of rules defined in
 *  @see FileScanner.flex
 *
 * @author  Krithiga Thangavelu, CEP, UNC CHAPEL HILL.
 * @version $Id: FileScanner.java,v 1.1 2006/10/30 17:26:13 parthee Exp $
 **/

package gov.epa.mims.analysisengine.table.io;

import java_cup.runtime.Symbol;
import java.util.Vector;
import java.io.IOException;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.text.ParseException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/10/05 11:21 AM from the specification file
 * <tt>FileScanner.flex</tt>
 */
public class FileScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;
  public static final int DATE = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\2\1\0\1\3\1\1\22\0\1\60\1\50\1\33"+
    "\1\56\1\0\1\55\1\53\1\0\1\34\1\35\1\5\1\27\1\44"+
    "\1\16\1\30\1\4\1\20\1\22\1\23\1\21\2\25\4\17\1\24"+
    "\1\43\1\47\1\45\1\46\1\52\1\0\4\26\1\31\10\26\1\32"+
    "\14\26\1\40\1\61\1\41\1\54\1\26\1\0\1\13\3\26\1\11"+
    "\1\12\5\26\1\14\5\26\1\7\1\15\1\6\1\10\5\26\1\36"+
    "\1\42\1\37\1\51\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\1\1\3\1\4\3\5\1\6"+
    "\2\7\1\10\1\11\1\12\1\5\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\11\41\1\44"+
    "\1\42\1\45\2\46\2\45\6\0\2\5\1\0\1\7"+
    "\1\0\1\5\1\7\1\47\1\5\7\41\1\50\1\41"+
    "\1\51\4\0\2\52\2\0\2\5\3\0\1\5\1\0"+
    "\1\47\7\41\1\53\1\41\1\0\1\47\1\0\1\52"+
    "\1\54\2\0\1\47\4\41\1\55\1\0\1\56\1\41"+
    "\1\0\1\41\1\0\1\41\1\57\1\41\2\0\1\41"+
    "\1\60\2\0\2\41\1\0\1\41\1\0\1\41\1\0"+
    "\1\41\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\226\0\372\0\u012c"+
    "\0\226\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\226"+
    "\0\u028a\0\u02bc\0\u02ee\0\226\0\226\0\226\0\226\0\226"+
    "\0\226\0\226\0\226\0\226\0\226\0\226\0\226\0\226"+
    "\0\226\0\226\0\226\0\226\0\226\0\226\0\226\0\372"+
    "\0\372\0\u0320\0\226\0\226\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\226\0\u0514\0\226"+
    "\0\u0546\0\226\0\u0578\0\u05aa\0\372\0\u028a\0\u05dc\0\u02bc"+
    "\0\u060e\0\u0640\0\u0672\0\u06a4\0\u01f4\0\u06d6\0\u0708\0\u073a"+
    "\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca"+
    "\0\u08fc\0\u092e\0\226\0\u0960\0\226\0\u0992\0\u0578\0\u05aa"+
    "\0\u09c4\0\u09f6\0\226\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0"+
    "\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0190\0\u0bea\0\u0c1c\0\u0c4e"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\226\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\u0dde\0\u0a28\0\u0190\0\u0e10\0\u0e42\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\226\0\u0f3c\0\226\0\u0f6e\0\u0fa0\0\u0fd2"+
    "\0\u1004\0\u1036\0\226\0\u1068\0\u109a\0\u10cc\0\u10fe\0\226"+
    "\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e"+
    "\0\u12c0\0\u12f2\0\226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\3\13"+
    "\1\14\3\13\1\15\1\16\1\17\1\16\1\17\1\16"+
    "\1\20\1\16\1\13\1\21\1\22\1\13\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\4\1\52\1\53"+
    "\1\54\1\55\2\52\1\56\3\52\1\57\3\52\1\60"+
    "\1\61\1\62\1\61\1\62\1\61\1\52\1\61\1\52"+
    "\1\63\1\64\1\52\1\65\1\66\23\52\2\55\1\67"+
    "\1\70\1\71\2\72\13\70\1\73\1\74\1\73\2\74"+
    "\1\70\1\73\31\70\2\72\1\70\64\0\1\6\62\0"+
    "\1\75\12\0\1\76\5\77\1\0\1\77\1\0\1\76"+
    "\1\100\26\0\2\75\5\0\1\101\1\102\62\0\1\13"+
    "\1\103\6\13\1\0\5\13\1\0\2\13\2\0\2\13"+
    "\35\0\10\13\1\0\5\13\1\0\2\13\2\0\2\13"+
    "\35\0\5\13\1\104\2\13\1\0\5\13\1\0\2\13"+
    "\2\0\2\13\45\0\1\105\5\106\1\0\1\106\1\0"+
    "\1\76\1\100\35\0\1\107\1\0\3\13\1\110\4\13"+
    "\1\0\5\111\1\0\1\111\1\13\1\0\1\112\1\110"+
    "\1\13\33\0\1\107\1\0\3\13\1\110\4\13\1\0"+
    "\1\16\1\17\1\16\1\17\1\16\1\0\1\16\1\13"+
    "\1\0\1\112\1\110\1\13\45\0\1\76\5\77\1\0"+
    "\1\77\1\0\1\76\1\100\50\0\5\112\1\0\1\112"+
    "\42\0\5\13\1\113\2\13\1\0\5\13\1\0\2\13"+
    "\2\0\2\13\27\0\1\52\2\0\30\52\1\0\25\52"+
    "\1\0\1\52\2\0\1\55\12\52\1\63\5\114\1\52"+
    "\1\114\1\52\1\63\1\64\2\52\1\0\23\52\2\55"+
    "\1\0\1\52\2\0\4\52\1\115\23\52\1\0\25\52"+
    "\1\0\1\52\2\0\10\52\1\116\17\52\1\0\25\52"+
    "\1\0\1\52\2\0\13\52\1\60\5\117\1\52\1\117"+
    "\1\52\1\63\1\64\2\52\1\0\25\52\1\0\1\52"+
    "\2\0\1\52\1\120\4\52\1\121\5\52\5\117\1\52"+
    "\1\117\2\52\1\122\1\121\1\52\1\123\25\52\1\0"+
    "\1\52\2\0\1\52\1\120\4\52\1\121\5\52\1\61"+
    "\1\62\1\61\1\62\1\61\1\52\1\61\2\52\1\122"+
    "\1\121\1\52\1\123\25\52\1\0\1\52\2\0\13\52"+
    "\1\63\5\114\1\52\1\114\1\52\1\63\1\64\2\52"+
    "\1\0\25\52\1\0\1\52\2\0\14\52\5\122\1\52"+
    "\1\122\5\52\1\0\25\52\1\0\1\52\2\0\10\52"+
    "\1\124\17\52\1\0\25\52\34\0\1\125\30\0\1\72"+
    "\103\0\1\126\54\0\1\127\1\130\1\127\2\130\1\126"+
    "\1\127\45\0\1\131\5\0\5\77\1\0\1\77\2\0"+
    "\1\112\1\131\30\0\1\101\1\132\1\133\57\101\5\134"+
    "\1\135\54\134\6\0\2\13\1\136\5\13\1\0\5\13"+
    "\1\0\2\13\2\0\2\13\35\0\6\13\1\137\1\13"+
    "\1\0\5\13\1\0\2\13\2\0\2\13\40\0\1\131"+
    "\5\0\5\106\1\0\1\106\2\0\1\112\1\131\47\0"+
    "\1\140\4\141\1\0\1\140\42\0\3\13\1\110\4\13"+
    "\1\142\5\143\1\0\1\143\1\13\1\142\1\0\1\110"+
    "\1\13\35\0\3\13\1\110\4\13\1\0\5\111\1\0"+
    "\1\111\1\13\1\0\1\112\1\110\1\13\40\0\1\144"+
    "\5\0\5\112\1\0\1\112\3\0\1\144\36\0\10\13"+
    "\1\0\5\13\1\0\2\13\2\0\1\13\1\145\27\0"+
    "\1\52\2\0\6\52\1\121\5\52\5\114\1\52\1\114"+
    "\2\52\1\122\1\121\1\52\1\0\25\52\1\0\1\52"+
    "\2\0\5\52\1\146\22\52\1\0\25\52\1\0\1\52"+
    "\2\0\11\52\1\147\16\52\1\0\25\52\1\0\1\52"+
    "\2\0\6\52\1\121\5\52\5\117\1\52\1\117\2\52"+
    "\1\122\1\121\1\52\1\123\25\52\1\0\1\52\2\0"+
    "\14\52\1\150\4\151\1\52\1\150\5\52\1\0\25\52"+
    "\1\0\1\52\2\0\6\52\1\121\4\52\1\152\5\153"+
    "\1\52\1\153\1\52\1\152\1\52\1\121\1\52\1\0"+
    "\25\52\1\0\1\52\2\0\6\52\1\154\5\52\5\122"+
    "\1\52\1\122\3\52\1\154\1\52\1\155\25\52\1\0"+
    "\1\52\2\0\27\52\1\156\1\0\25\52\21\0\4\157"+
    "\1\0\1\157\45\0\1\131\4\0\1\142\5\160\1\0"+
    "\1\160\1\0\1\142\1\0\1\131\32\0\1\133\57\0"+
    "\5\134\1\161\60\134\1\162\1\161\54\134\6\0\3\13"+
    "\1\163\4\13\1\0\5\13\1\0\2\13\2\0\2\13"+
    "\35\0\7\13\1\136\1\0\5\13\1\0\2\13\2\0"+
    "\2\13\33\0\1\164\61\0\1\164\12\0\1\140\4\141"+
    "\1\0\1\140\53\0\5\160\1\0\1\160\42\0\3\13"+
    "\1\110\4\13\1\0\5\143\1\0\1\143\1\13\2\0"+
    "\1\110\1\13\40\0\1\144\4\0\1\165\5\166\1\0"+
    "\1\166\1\0\1\165\1\0\1\144\30\0\1\52\2\0"+
    "\6\52\1\167\21\52\1\0\25\52\1\0\1\52\2\0"+
    "\12\52\1\146\15\52\1\0\25\52\1\0\1\52\2\0"+
    "\1\52\1\170\26\52\1\0\25\52\1\0\1\52\2\0"+
    "\1\52\1\170\12\52\1\150\4\151\1\52\1\150\5\52"+
    "\1\0\25\52\1\0\1\52\2\0\14\52\5\153\1\52"+
    "\1\153\5\52\1\0\25\52\1\0\1\52\2\0\6\52"+
    "\1\121\5\52\5\153\1\52\1\153\3\52\1\121\1\52"+
    "\1\155\25\52\1\0\1\52\2\0\6\52\1\154\4\52"+
    "\1\171\5\172\1\52\1\172\1\52\1\171\1\52\1\154"+
    "\1\52\1\0\25\52\1\0\1\52\2\0\30\52\1\155"+
    "\25\52\20\0\5\173\1\0\1\173\45\0\1\131\5\0"+
    "\5\160\1\0\1\160\3\0\1\131\30\0\4\134\1\133"+
    "\1\161\54\134\17\0\1\174\1\0\3\174\1\0\1\174"+
    "\53\0\5\166\1\0\1\166\34\0\1\52\2\0\30\52"+
    "\1\175\25\52\1\0\1\52\2\0\14\52\1\176\1\52"+
    "\3\176\1\52\1\176\5\52\1\0\25\52\1\0\1\52"+
    "\2\0\14\52\5\172\1\52\1\172\5\52\1\0\25\52"+
    "\1\0\1\52\2\0\14\52\5\172\1\52\1\172\5\52"+
    "\1\155\25\52\20\0\5\177\1\0\1\177\34\0\1\52"+
    "\2\0\14\52\5\200\1\52\1\200\5\52\1\0\25\52"+
    "\20\0\5\201\1\0\1\201\34\0\1\52\2\0\14\52"+
    "\5\202\1\52\1\202\5\52\1\0\25\52\20\0\5\203"+
    "\1\0\1\203\34\0\1\52\2\0\14\52\5\204\1\52"+
    "\1\204\5\52\1\0\25\52\1\0\1\52\1\205\1\206"+
    "\1\207\27\52\1\210\23\52\2\207\3\0\1\206\14\0"+
    "\1\211\1\212\1\211\2\212\1\0\1\211\53\0\1\211"+
    "\1\212\1\211\2\212\1\0\1\211\34\0\1\52\2\0"+
    "\14\52\1\213\1\214\1\213\2\214\1\52\1\213\5\52"+
    "\1\0\25\52\25\0\1\215\54\0\1\211\1\212\1\211"+
    "\2\212\1\215\1\211\34\0\1\52\2\0\21\52\1\216"+
    "\6\52\1\0\25\52\1\0\1\52\2\0\14\52\1\213"+
    "\1\214\1\213\2\214\1\216\1\213\5\52\1\0\25\52"+
    "\21\0\4\217\1\0\1\217\34\0\1\52\2\0\15\52"+
    "\4\220\1\52\1\220\5\52\1\0\25\52\20\0\5\221"+
    "\1\0\1\221\34\0\1\52\2\0\14\52\5\222\1\52"+
    "\1\222\5\52\1\0\25\52\34\0\1\223\26\0\1\52"+
    "\2\0\30\52\1\223\25\52\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\1\11\6\1\1\11"+
    "\3\1\24\11\3\1\2\11\11\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\6\0\2\1\1\0\1\1\1\0"+
    "\13\1\1\11\1\1\1\11\4\0\1\1\1\11\2\0"+
    "\2\1\3\0\1\1\1\0\10\1\1\11\1\1\1\0"+
    "\1\1\1\0\2\1\2\0\5\1\1\11\1\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\2\0"+
    "\1\1\1\11\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/** a getter method for the line recently tokenized
 *  @return String the entire line
 */
  public String getLine() 
  {
      return line.toString();
  }

  /** a getter method for list of tokens separated by delimiter in a line
   *  @param char delimiter
   *  @return Symbol[] an array of tokens
   *  return value is null when end of file is reached
   **/
  public Symbol[] getTokensPerLine(char delimiter, boolean ignoreMultipleDelims) throws IOException 
  {
   
   Vector tokens = new Vector();
   int numTokensBetweenDelim = 0;
   int prevPositionOfDelim = -1;
   int lastType =0; // default - NULL_LITERAL
   line.setLength(0);
   Symbol modifiedToken;
   Symbol token = next_token();
   if(token.sym == TokenConstants.EOF) return null;
   while(token!=null) 
   {
      if(token.sym == delimiter || token.sym == TokenConstants.EOL || token.sym
== TokenConstants.EOF || (numTokensBetweenDelim == 0 && ignoreMultipleDelims))
      {
         if(numTokensBetweenDelim == 0) 
         {
            if(token.sym == delimiter && !ignoreMultipleDelims)
            {
               prevPositionOfDelim = token.right-1+token.value.toString().length();
               modifiedToken = symbol(TokenConstants.NULL_LITERAL, new String());
               tokens.add(modifiedToken);
            }
         } 
         else 
         {
            if(numTokensBetweenDelim > 1) 
            {
             String string = line.substring(prevPositionOfDelim+1, line.length()-1);
             line.setLength(prevPositionOfDelim+1);
             modifiedToken = symbol(TokenConstants.STRING_LITERAL, string);
             line.append(token.value);
             while(numTokensBetweenDelim-- != 0) tokens.removeElementAt(tokens.size()-1);
             tokens.add(modifiedToken);
            }
            else 
            {
             // for ease of retrieval.. change the value object to its type
             // say a Double literal..value converted to Double from String
             //exception null or missing value .. type unknown so store as string
             if(lastType != TokenConstants.NULL_LITERAL) 
             {
                modifiedToken = (Symbol)tokens.get(tokens.size()-1);
                tokens.set(tokens.size()-1, changeType(modifiedToken));
                lastType = TokenConstants.NULL_LITERAL;
             }
             if(token.sym == TokenConstants.EOF)
               break;
            }
             prevPositionOfDelim = token.right-1+token.value.toString().length();
             numTokensBetweenDelim = 0;
         }
         if( token.sym == TokenConstants.EOL || token.sym == TokenConstants.EOF) 
            break;
      } 
      else 
      {
         numTokensBetweenDelim++;
         tokens.add(token);
         lastType = token.sym;
      }
      token = next_token();
   }
   return (Symbol[])tokens.toArray(new Symbol[0]);
  }

  /**  changes the String to an object of corresponding type
   *   @param Symbol token(containing the object type and String equivalent of value)
   *   @return Symbol 
   **/
  private Symbol changeType(Symbol token) 
  {
   
   switch(token.sym) 
   {

     case 6:
      Boolean b = new Boolean((String)token.value);
      token.value = b;
      return token;
   
     case 1:
      token.value = ((String)(token.value)).trim();
      return token;

     case 2:
      Double d = new Double((String)token.value);
      token.value = d;
      return token;
      
     case 3:
       try 
       {
         Integer i = new Integer((String) token.value); 
         token.value = i;
       } 
       catch (NumberFormatException e) 
       {
            Double id = new Double((String) token.value);    
            token.value = id;
            token.sym = TokenConstants.DOUBLE_LITERAL;
       }
       return token;
   
     case 4:
     case 5:
         Date da = latest_date; //its easier to store last parsed date in Date format
         if(da != null)
            token.value = da;
         else 
            token.sym = TokenConstants.STRING_LITERAL;
         return token;
    }
   return token;
  }

  private StringBuffer string = new StringBuffer();
  private boolean stringInitialState = false;
  private StringBuffer line = new StringBuffer();
  private boolean needToAppendQuote = false;
  private Date latest_date;

  /** constructor for token
   * @param int type - type of the token string or double or integer or null or boolean
   * @param Object value - the actual token as an object
   * @return java_cup.runtime.Symbol
   **/
  protected Symbol symbol(int type, Object value) 
  {
    if(type != TokenConstants.NULL_LITERAL) line.append(value);
    if(needToAppendQuote) 
    {
      line.append("\"");
      needToAppendQuote = false;
    }
    return new Symbol(type, yyline, yycolumn, value);
  }

/** a utility method..given a type gives toString()
 *  @param int type - refer gov.epa.mims.analysisengine.table.sym
 *  @return String 
 **/
 public String printType (int type) 
 {
  switch(type) 
  {
   case -3:
      return  "COMMENT";
   case -2:
      return "EOL";
   case -1:
      return "EOF";
   case 0:
      return "NULL_LITERAL";
   case 1:
      return "STRING";
   case 2: 
      return "DOUBLE";
   case 3: return "INTEGER";
   case 4: return "DATE";
   case 5: return "DATE_TIME";
   case 6: return "BOOLEAN";
   }
   return String.valueOf((char)type);
  }

   boolean checkDate(String date) 
   {
      String[] splits = date.split("/");
      int month = Integer.parseInt(splits[0]);
      int day = Integer.parseInt(splits[1]);
      if(month==0 || month > 12)
         return false;
      if(day == 0 || day > 31)
         return false;
      return true;
   }

   boolean checkTime(String time) 
   {
      String[] splits = time.split(":");
      int hour = Integer.parseInt(splits[0]);
      int minutes = Integer.parseInt(splits[1]);
      if(hour<0 || hour > 24)
         return false;
      if(minutes < 0 || minutes > 59)
         return false;
      return true;
   }

   /** stores date in the class variable latest_date
    *  as a  java.util.Date object.
    *  @param String data (mm/dd/yyyy)
    *  @param String time (hh:mm)
    *  @return none
    */
   private void storeDate(String date, String time) 
   {
      SimpleDateFormat sdf;
      latest_date = null;

      if(date == null) {
         latest_date=null;
         return;
      }

      if(time!=null) 
      {
         date+=" ";
         date+=time;
         sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm");
      }
      else
          sdf = new SimpleDateFormat("MM/dd/yyyy");

      try 
      {
         latest_date =  sdf.parse(date);
      } 
      catch (ParseException pe) 
      { 
         latest_date = null; return;
      }

   }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FileScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FileScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return symbol(TokenConstants.DOT, yytext().toString());
          }
        case 50: break;
        case 6: 
          { return symbol(TokenConstants.MINUS, yytext().toString());
          }
        case 51: break;
        case 5: 
          { return symbol(TokenConstants.STRING_LITERAL, yytext().toString());
          }
        case 52: break;
        case 7: 
          { return symbol(TokenConstants.INTEGER_LITERAL, yytext().toString());
          }
        case 53: break;
        case 40: 
          { yybegin(YYINITIAL);
               string.append(yytext());
               needToAppendQuote = true;
               if(stringInitialState)
                  return symbol(TokenConstants.INTEGER_LITERAL, string.substring(0, string.length()-1));
               else 
                 return symbol(TokenConstants.STRING_LITERAL, string.substring(0, string.length()-1));
          }
        case 54: break;
        case 12: 
          { return symbol(TokenConstants.LPAREN, yytext().toString());
          }
        case 55: break;
        case 13: 
          { return symbol(TokenConstants.RPAREN, yytext().toString());
          }
        case 56: break;
        case 4: 
          { return symbol(TokenConstants.MULT, yytext().toString());
          }
        case 57: break;
        case 24: 
          { return symbol(TokenConstants.NOT, yytext().toString());
          }
        case 58: break;
        case 30: 
          { return symbol(TokenConstants.HASH, yytext().toString());
          }
        case 59: break;
        case 11: 
          { line.append(yytext());
                            string.setLength(0); 
                            stringInitialState = true;
                            yybegin(STRING);
          }
        case 60: break;
        case 33: 
          { // check why \" is in the matching condition in state String
               stringInitialState= false;
               string.append( yytext() );
          }
        case 61: break;
        case 20: 
          { return symbol(TokenConstants.COMMA, yytext().toString());
          }
        case 62: break;
        case 22: 
          { return symbol(TokenConstants.GT, yytext().toString());
          }
        case 63: break;
        case 36: 
          { yybegin(YYINITIAL); 
               needToAppendQuote = true;
               return symbol(TokenConstants.STRING_LITERAL, string.toString());
          }
        case 64: break;
        case 39: 
          { return symbol(TokenConstants.DOUBLE_LITERAL, yytext().toString());
          }
        case 65: break;
        case 26: 
          { return symbol(TokenConstants.QUESTION, yytext().toString());
          }
        case 66: break;
        case 25: 
          { return symbol(TokenConstants.COMP, yytext().toString());
          }
        case 67: break;
        case 16: 
          { return symbol(TokenConstants.LBRACK, yytext().toString());
          }
        case 68: break;
        case 9: 
          { return symbol(TokenConstants.PLUS, yytext().toString());
          }
        case 69: break;
        case 17: 
          { return symbol(TokenConstants.RBRACK, yytext().toString());
          }
        case 70: break;
        case 48: 
          { yybegin(YYINITIAL);
              needToAppendQuote = true;
              string.append(yytext());
              if(stringInitialState) 
              {
               storeDate(yytext().substring(0,((yytext()).length())-1), (String)null); 
               return symbol(TokenConstants.DATE_LITERAL, string.substring(0, string.length()-1));
              }
              else 
                 return symbol(TokenConstants.STRING_LITERAL, string.substring(0, string.length()-1));
          }
        case 71: break;
        case 46: 
          { yybegin(YYINITIAL);
               string.append(yytext());
               needToAppendQuote = true;
               if(stringInitialState)
                  return symbol(TokenConstants.BOOLEAN_LITERAL, string.substring(0, string.length()-1));
               else 
                 return symbol(TokenConstants.STRING_LITERAL, string.substring(0, string.length()-1));
          }
        case 72: break;
        case 35: 
          { System.out.print(yytext());
          }
        case 73: break;
        case 45: 
          { yybegin(YYINITIAL);
                      if(!checkTime(yytext().toString())) 
                      {
                        storeDate(string.toString(), (String)null);
                        yypushback(yytext().length());
                        return symbol(TokenConstants.DATE_LITERAL, string.toString());
                      }
                      storeDate(string.toString(), yytext().toString()); 
                      string.append(yytext()); 
                      return symbol(TokenConstants.DATE_TIME_LITERAL, string.toString());
          }
        case 74: break;
        case 32: 
          { return symbol(TokenConstants.SPACE, " ");
          }
        case 75: break;
        case 49: 
          { yybegin(YYINITIAL);
              needToAppendQuote = true;
              string.append(yytext());
              if(stringInitialState) {
                String[] splits = yytext().substring(0, yytext().length()-1).split("[\r\n|\n|\r]|[ \t\f]");
                if(checkDate(splits[0]) && checkTime(splits[1])) 
                {
                  storeDate(splits[0], splits[1]); 
                  return symbol(TokenConstants.DATE_TIME_LITERAL, string.substring(0, string.length()-1));
                }
              }
                 return symbol(TokenConstants.STRING_LITERAL, string.substring(0, string.length()-1));
          }
        case 76: break;
        case 19: 
          { return symbol(TokenConstants.SEMICOLON, yytext().toString());
          }
        case 77: break;
        case 27: 
          { return symbol(TokenConstants.AND, yytext().toString());
          }
        case 78: break;
        case 1: 
          { line.append(yytext());
          }
        case 79: break;
        case 42: 
          { return symbol(TokenConstants.COMMENT, yytext().toString());
          }
        case 80: break;
        case 18: 
          { return symbol(TokenConstants.OR, yytext().toString());
          }
        case 81: break;
        case 21: 
          { return symbol(TokenConstants.EQ, yytext().toString());
          }
        case 82: break;
        case 8: 
          { return symbol(TokenConstants.COLON, yytext().toString());
          }
        case 83: break;
        case 29: 
          { return symbol(TokenConstants.MOD, yytext().toString());
          }
        case 84: break;
        case 23: 
          { return symbol(TokenConstants.LT, yytext().toString());
          }
        case 85: break;
        case 31: 
          { return symbol(TokenConstants.TAB, "\t");
          }
        case 86: break;
        case 3: 
          { return symbol(TokenConstants.DIV, yytext().toString());
          }
        case 87: break;
        case 37: 
          { yybegin(YYINITIAL);
                       storeDate(string.toString(), (String)null);            
                       yypushback(yytext().length());
                       return symbol(TokenConstants.DATE_LITERAL, string.toString());
          }
        case 88: break;
        case 47: 
          { string.setLength(0); string.append(yytext()); 
                           if(checkDate(string.toString()))
                              yybegin(DATE); 
                           else
                              return symbol(TokenConstants.STRING_LITERAL, yytext().toString());
          }
        case 89: break;
        case 38: 
          { string.append(yytext());
          }
        case 90: break;
        case 43: 
          { yybegin(YYINITIAL);
               string.append(yytext());
               needToAppendQuote = true;
               if(stringInitialState)
                 return symbol(TokenConstants.DOUBLE_LITERAL, string.substring(0, string.length()-1));
               else 
                 return symbol(TokenConstants.STRING_LITERAL, string.substring(0, string.length()-1));
          }
        case 91: break;
        case 44: 
          { return symbol(TokenConstants.BOOLEAN_LITERAL, yytext().toString());
          }
        case 92: break;
        case 2: 
          { return symbol(TokenConstants.EOL, yytext().toString());
          }
        case 93: break;
        case 28: 
          { return symbol(TokenConstants.XOR, yytext().toString());
          }
        case 94: break;
        case 41: 
          { stringInitialState = false;
               string.append("\\\"");
          }
        case 95: break;
        case 14: 
          { return symbol(TokenConstants.LBRACE, yytext().toString());
          }
        case 96: break;
        case 15: 
          { return symbol(TokenConstants.RBRACE, yytext().toString());
          }
        case 97: break;
        case 34: 
          { stringInitialState = false; 
               string.append(yytext().toString());
          }
        case 98: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return symbol(TokenConstants.EOF, null);
            }
            case 148: break;
            default:
              { return new java_cup.runtime.Symbol(TokenConstants.EOF); }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java FileScanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        FileScanner scanner = null;
        try {
          scanner = new FileScanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
