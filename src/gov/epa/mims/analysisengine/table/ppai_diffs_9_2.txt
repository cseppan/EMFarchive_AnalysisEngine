? .nbattrs
? META-INF
? diff_7_30.txt
? diff_7_30_v2.txt
? diffs_8_26_krith.txt
? diffs_8_26_parthee.ttxt
? diffs_8_6.txt
? diffs_9_2.txt
? example
? ppai_diffs_9_2.txt
? icons/Thumbs.db
Index: ColumnFormatGUI.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/table/ColumnFormatGUI.java,v
retrieving revision 1.6
diff -w -r1.6 ColumnFormatGUI.java
22c22
<  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
---
>  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
Index: ColumnFormatInfo.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/table/ColumnFormatInfo.java,v
retrieving revision 1.2
diff -w -r1.2 ColumnFormatInfo.java
17c17
<  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
---
>  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
35c35
<    public Format format = FormattedCellRenderer.nullFormatter;
---
>    private Format format = FormattedCellRenderer.nullFormatter;
91a92,109
> 
>    /**
>     * set a new format object
>     * @param newFormat
>     */
>    public void setFormat(Format newFormat)
>    {
>       this.format = newFormat;
>    }//setFormat()
> 
>    /**
>     * returns the format for this info object
>     * @return
>     */
>    public Format getFormat()
>    {
>       return format;
>    }
Index: ColumnFormatPanel.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/table/ColumnFormatPanel.java,v
retrieving revision 1.3
diff -w -r1.3 ColumnFormatPanel.java
5d4
< import java.text.DecimalFormat;
20c19
<  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
---
>  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
113c112
<          formatPanel.setFormat(formatInfo.format);
---
>          formatPanel.setFormat(formatInfo.getFormat());
146c145
<       setFormat(formatInfo.format);
---
>       setFormat(formatInfo.getFormat());
171c170
<          formatInfo.format = formatPanel.getSelectedFormat();
---
>          formatInfo.setFormat(formatPanel.getSelectedFormat());
175c174
<          formatInfo.format = null;
---
>          formatInfo.setFormat(null);
194c193
<        formatInfo.format = newFormat;
---
>        formatInfo.setFormat(newFormat);
196c195
<        if (formatInfo.format != null)
---
>        if (formatInfo.getFormat() != null)
205c204
<           if (formatInfo.format instanceof SimpleDateFormat)
---
>           if (formatInfo.getFormat() instanceof SimpleDateFormat)
207c206
<              formatPanel = new DateFormatPanel((SimpleDateFormat)formatInfo.format,
---
>              formatPanel = new DateFormatPanel((SimpleDateFormat)formatInfo.getFormat(),
210c209
<           else if (formatInfo.format instanceof DecimalFormat)
---
>           else if (formatInfo.getFormat() instanceof SignificantDigitsFormat)
213c212
<                    (DecimalFormat)formatInfo.format, null, true, true, true);
---
>                    (SignificantDigitsFormat)formatInfo.getFormat(), null, true, true, true);
Index: DoubleFormatPanel.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/table/DoubleFormatPanel.java,v
retrieving revision 1.6
diff -w -r1.6 DoubleFormatPanel.java
26c26
<  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
---
>  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
81a82,83
>       this.format = format;
> 
88c90
<       sigDigitsSpinner = new NumericSpinner("Significant Digits:", 2.0,
---
>       sigDigitsSpinner = new NumericSpinner("Significant Digits:", 3.0,
156c158
< 
---
>       initGUIFromModel();
159a162,180
>     * this method initializes the panel from the set format class
>     */
>    protected void initGUIFromModel()
>    {
>       String formatOption = ((SignificantDigitsFormat) format).getSelectedOption();
>       JRadioButton buttonToBeSelected = (JRadioButton) buttonMap.get(formatOption);
>       buttonToBeSelected.setSelected(true);
> 
>       int numDecimalPlaces = ((SignificantDigitsFormat) format).getNumberOfDecimalPlaces();
>       decimalSpinner.setValue(numDecimalPlaces);
> 
>       int numSigDigits = ((SignificantDigitsFormat) format).getNumberOfSignificantDigits();
>       sigDigitsSpinner.setValue(numSigDigits);
> 
>       updateFormatField();
>       actionPerformed(null);
>    }//initGUIFromModel()
> 
>    /**
200,201c221,222
<       SignificantDigitsFormat retval = null;
<       String formatPattern = formatField.getText();
---
>       SignificantDigitsFormat retval = new SignificantDigitsFormat();
>       //String formatPattern = formatField.getText();
202a224,230
>       int numDecimalPlaces = (int) decimalSpinner.getValue();
>       String formatOption = getFormatOption();
>       retval.setSelectedOption(formatOption);
>       retval.setNumberOfSignificantDigits(numSigDigits);
>       retval.setNumberOfDecimalPlaces(numDecimalPlaces);
>       retval.applyPattern(retval.toPattern());
> 
203a232
> /*
206c235,236
<          retval = (SignificantDigitsFormat) formatters.get(formatPattern);
---
>          retval = (SignificantDigitsFormat)
>                   ((SignificantDigitsFormat) formatters.get(formatPattern));
208c238,240
<          if (retval == null)
---
>          // if there doesnt exist a format with the pattern or if the numSigDigits
>          // is different than the one set in the spinner
>          if (retval == null || retval.getNumberOfSignificantDigits() != numSigDigits)
212,214d243
<          }
<          // get the selected option from the buttongroup
<          // not sure whether this will work
216d244
< 
217a246,247
>             retval.setNumberOfDecimalPlaces(numDecimalPlaces);
>          }
220c250
< 
---
> */
230,234d259
<       // We require that the format passed in be a DecimalFormat.
<       String formatString = null;
< 
<       if (newFormat instanceof DecimalFormat)
<       {
236,318c261
<          formatString = ((DecimalFormat) newFormat).toPattern();
<          formatField.setText(formatString);
< 
<          // Look for an 'E' or and 'e' in th format string.
<          // If we find one, check the scientific check box.
<          /*
<          String selectedOption = ((SignificantDigitsFormat)
<                                   newFormat).getSelectedOption();
<          JButton buttonToSelect = (JButton) buttonMap.get(selectedOption);
<          group.setSelected(buttonToSelect.getModel(), true);
<          */
<          standardButton.setSelected(true);
<          scientificButton.setSelected((formatString.indexOf('e') > 0)
<                                    || (formatString.indexOf('E') > 0));
< 
<          dollarsButton.setSelected(formatString.indexOf('$') > -1);
<          percentButton.setSelected(formatString.indexOf('%') > 0);
< 
<          actionPerformed(null);
< 
<          // If we have a decimal place, then count the number
< /*
<          int dot = formatString.indexOf('.');
< 
<          if (dot >= 0)
<          {
<             if (scientificButton.isSelected())
<             {
<                decimalSpinner.setValue(formatString.length() - 3 - dot - 1);
<             }
<             else
<             {
<                decimalSpinner.setValue(formatString.length() - dot - 1);
<             }
<          }
<          else
<          {
<             decimalSpinner.setValue(0.0);
<          }
< */
<          // if this format has significant digits enabled then
<          // set the significant digits spinner accordingly
<          if (newFormat instanceof SignificantDigitsFormat)
<          {
<             sigDigitsSpinner.setValue(((SignificantDigitsFormat)
<                newFormat).getNumberOfSignificantDigits());
<          }//if (newFormat instanceof SignificantDigitsFormat)
<          else
<          {
<             sigDigitsSpinner.setValue(0.0);
<          }//else if (newFormat instanceof SignificantDigitsFormat)
< 
<          int dot = formatString.indexOf('.');
< 
<          if (dot >= 0)
<          {
<             if (scientificButton.isSelected())
<             {
<                decimalSpinner.setValue(sigDigitsSpinner.getValue() - 1);
<             }
<             else
<             {
<                decimalSpinner.setValue(formatString.length() - dot - 1);
<             }
<          }
<          else
<          {
<             decimalSpinner.setValue(0.0);
<          }
< 
<          setSampleLabel();
<       }
<       else
<       {
<          DefaultUserInteractor.get().notify(
<                                             "Invalid object",
<                                             "A DecimalFormat is required in " +
<                                             "DoubleFormatPanel.setFormat(), "
<                                             + "but a "
<                                             + newFormat.getClass().toString()
<                                             + " was found.",
<                                             UserInteractor.ERROR);
<       }
---
>       initGUIFromModel();
327c270
<       format = getSelectedFormat();
---
>       Format fieldFormat = getSelectedFormat();
348,385c291,293
<       int numDecimals = (int) decimalSpinner.getValue();
<       boolean useE = scientificButton.isSelected();
<       StringBuffer sb = new StringBuffer();
< 
<       // Place dollars first if selected.
<       if (dollarsButton.isSelected())
<       {
<          sb.append('$');
<       }
< 
<       // Always put a zero at the front. This is needed if the user chooses
<       // 0 decimal places and no special options.
<       sb.append('0');
< 
<       // Set the number of decimal places.
<       if (numDecimals > 0)
<       {
<          sb.append('.');
< 
<          for (int i = 0; i < numDecimals; i++)
<          {
<             sb.append('0');
<          }
<       }
< 
<       // Set scientific notation if selected.
<       if (useE)
<       {
<          sb.append("E00");
<       }
< 
<       // Set the percent last. This multiplies the value in the field by 100.
<       if (percentButton.isSelected())
<       {
<          sb.append('%');
<       }
< 
<       formatField.setText(sb.toString());
---
>       SignificantDigitsFormat fieldFormat = (SignificantDigitsFormat)
>             getSelectedFormat();
>       formatField.setText(fieldFormat.toPattern());
Index: FormatChooserPanel.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/table/FormatChooserPanel.java,v
retrieving revision 1.3
diff -w -r1.3 FormatChooserPanel.java
18c18
<  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
---
>  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
157c157
<        else if (format instanceof DecimalFormat)
---
>        else if (format instanceof SignificantDigitsFormat)
159c159
<           formatString = ((DecimalFormat)format).toPattern();
---
>           formatString = ((SignificantDigitsFormat)format).toPattern();
Index: FormattedCellRenderer.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/table/FormattedCellRenderer.java,v
retrieving revision 1.6
diff -w -r1.6 FormattedCellRenderer.java
7d6
< import java.text.DecimalFormat;
25c24
<  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
---
>  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
140d138
<        FormattedCellRenderer fc = null;
143,144c141,142
<            fc=new FormattedCellRenderer(new
< DecimalFormat("0"));
---
>            return new FormattedCellRenderer(new
> SignificantDigitsFormat("0"));
148,149c146,147
<             fc=new FormattedCellRenderer(new
< DecimalFormat("0.000E0"));
---
>             return new FormattedCellRenderer(new
> SignificantDigitsFormat("0.000E0"));
153c151
<             fc=new FormattedCellRenderer(new SimpleDateFormat("HH:mm "+
---
>             return new FormattedCellRenderer(new SimpleDateFormat("HH:mm "+
158c156
<             fc=new FormattedCellRenderer(null);
---
>             return new FormattedCellRenderer(null);
160,161d157
<          fc.setBackground(Color.white);
<          return fc;
Index: LoadConfigurationGUI.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/table/LoadConfigurationGUI.java,v
retrieving revision 1.3
diff -w -r1.3 LoadConfigurationGUI.java
52c52
<  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
---
>  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
278d277
<            formats = (Hashtable)(model.getColumnFormatInfo()).clone();
290a290
>             //model.reset();
295,296d294
<                model.reset();
<                formatTable(formats);
411c409
<                         FormattedCellRenderer(formatInfo.format);
---
>                         FormattedCellRenderer(formatInfo.getFormat());
Index: OverallTableModel.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/table/OverallTableModel.java,v
retrieving revision 1.5
diff -w -r1.5 OverallTableModel.java
18c18
<  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
---
>  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
21,22c21
<       extends MultiRowHeaderTableModel implements TableModelListener,
< java.io.Serializable, FormatAndIndexInfoIfc
---
>       extends MultiRowHeaderTableModel implements TableModelListener, java.io.Serializable
262c261
<       return info.format;
---
>       return info.getFormat();
Index: RowHeaderTable.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/table/RowHeaderTable.java,v
retrieving revision 1.7
diff -w -r1.7 RowHeaderTable.java
21c21
<  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
---
>  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
227c227
<             column.setCellRenderer(new FormattedCellRenderer(new DecimalFormat("0")));
---
>             column.setCellRenderer(new FormattedCellRenderer(new SignificantDigitsFormat("0")));
231c231
<             column.setCellRenderer(new FormattedCellRenderer(new DecimalFormat("0.000E0")));
---
>             column.setCellRenderer(new FormattedCellRenderer(new SignificantDigitsFormat("0.000E0")));
Index: SignificantDigitsFormat.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/table/SignificantDigitsFormat.java,v
retrieving revision 1.1
diff -w -r1.1 SignificantDigitsFormat.java
12c12
<  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
---
>  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
64a65
>       setFromPattern(pattern);
132a134,135
>       if (selectedOption.equals(SCIENTIFIC_FORMAT))
>       {
133a137
>       }
194c198
<    public String toNewPattern()
---
>    public String toPattern()
195a200,204
> 
>       // if the selectedOption is not set use the super class toPattern
>       if (selectedOption == null)
>          return super.toPattern();
> 
233a243,277
> 
>    public void setFromPattern(String formatString)
>    {
>       // Look for an 'E' or and 'e' in th format string.
>       // If we find one, check the scientific check box.
>       selectedOption = this.STANDARD_FORMAT;
>       if((formatString.indexOf('e') > 0)
>          || (formatString.indexOf('E') > 0))
>       {
>          selectedOption = this.SCIENTIFIC_FORMAT;
>       }
>       else if (formatString.indexOf('$') > -1)
>       {
>          selectedOption = this.CURRENCY_FORMAT;
>       }
>       else if(formatString.indexOf('%') > 0)
>       {
>          selectedOption = this.PERCENTAGE_FORMAT;
>       }
>       // If we have a decimal place, then count the number
> 
>       int dot = formatString.indexOf('.');
> 
>       if (dot >= 0)
>       {
>          if (selectedOption.equals(SCIENTIFIC_FORMAT))
>          {
>             numDecimalPlaces = formatString.length() - 3 - dot - 1;
>          }//if (selectedOption.equals(SCIENTIFIC_FORMAT))
>          else
>          {
>             numDecimalPlaces = formatString.length() - dot - 1;
>          }//else
>       }//if (dot >= 0)
>    }//setFromPattern()
Index: SortFilterTablePanel.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/table/SortFilterTablePanel.java,v
retrieving revision 1.13
diff -w -r1.13 SortFilterTablePanel.java
36c36
<  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
---
>  * @version $Id: ppai_diffs_9_2.txt,v 1.2 2005/09/19 14:50:03 rhavaldar Exp $
92a93,95
>    /** to keep track of the columnformatinfo for multiple columns **/
>    protected ColumnFormatInfo formatInfo = null;
> 
429c432
<          ColumnFormatInfo formatInfo = new ColumnFormatInfo(column);
---
>          ColumnFormatInfo singleFormatInfo = new ColumnFormatInfo(column);
431c434
<                table.getColumnName(selectedColumn), formatInfo);
---
>                table.getColumnName(selectedColumn), singleFormatInfo);
446c449
<             formatInfo = formatGUI.getColumnFormatInfo();
---
>             singleFormatInfo = formatGUI.getColumnFormatInfo();
449c452
<             column.setPreferredWidth(formatInfo.width);
---
>             column.setPreferredWidth(singleFormatInfo.width);
452c455
<                   formatInfo.format);
---
>                   singleFormatInfo.getFormat());
454,457c457,460
<             formattedRenderer.setFont(formatInfo.font);
<             formattedRenderer.setHorizontalAlignment(formatInfo.alignment);
<             formattedRenderer.setForeground(formatInfo.foreground);
<             formattedRenderer.setBackground(formatInfo.background);
---
>             formattedRenderer.setFont(singleFormatInfo.font);
>             formattedRenderer.setHorizontalAlignment(singleFormatInfo.alignment);
>             formattedRenderer.setForeground(singleFormatInfo.foreground);
>             formattedRenderer.setBackground(singleFormatInfo.background);
464c467
<                   formatInfo);
---
>                   singleFormatInfo);
554a558
>       // here the columnformatinfo is being arbitrarily picked
556c560,564
<       ColumnFormatInfo formatInfo = new ColumnFormatInfo(column);
---
>       // if there was an existing columnformatinfo use that..
>       if (formatInfo == null)
>       {
>          formatInfo = new ColumnFormatInfo(column);
>       }
632,633c640,641
<                if (formatInfo.format != null) {
<                   formattedRenderer.setFormat(formatInfo.format);
---
>                if (formatInfo.getFormat() != null) {
>                   formattedRenderer.setFormat(formatInfo.getFormat());
1282c1290
<              FormattedCellRenderer(info.format);
---
>              FormattedCellRenderer(info.getFormat());
Index: TestSignificantDigitsFormat.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/table/TestSignificantDigitsFormat.java,v
retrieving revision 1.1
diff -w -r1.1 TestSignificantDigitsFormat.java
38c38
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
49c49
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
60c60
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
71c71
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
89c89
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
100c100
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
111c111
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
122c122
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
141c141
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
152c152
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
163c163
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
174c174
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
190c190
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
199c199
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
209c209
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
219c219
<       formatter.applyPattern(formatter.toNewPattern());
---
>       formatter.applyPattern(formatter.toPattern());
