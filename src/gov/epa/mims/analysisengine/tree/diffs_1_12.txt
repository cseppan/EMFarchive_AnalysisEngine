? diffs_1_12.txt
? doc-files/mylogfile.txt
Index: AvailableOptionsAndDefaults.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/tree/AvailableOptionsAndDefaults.java,v
retrieving revision 1.13
diff -r1.13 AvailableOptionsAndDefaults.java
58c58
<    public AnalysisOption[] getDefaultValues(String[] keywords)
---
>    public AnalysisOption[] getDefaultValues(String[] keywords) throws CloneNotSupportedException
64c64
<          defaults[i] = (AnalysisOption) defValues.get(keywords[i]);
---
>          defaults[i] = ((AnalysisOption) defValues.get(keywords[i]));
68c68,72
<             defaults[i] = (AnalysisOption) globalDefaults.get(keywords[i]);
---
>             defaults[i] = (AnalysisOption)((AnalysisOption) globalDefaults.get(keywords[i])).clone();
>          }
>          else
>          {
>             defaults[i]  = (AnalysisOption)defaults[i].clone();
Index: AxisTime.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/tree/AxisTime.java,v
retrieving revision 1.3
diff -r1.3 AxisTime.java
16,18c16,18
<    extends AxisContinuous
<    implements Serializable,
<               Cloneable
---
> extends AxisContinuous
> implements Serializable,
> Cloneable
22c22
< 
---
>    
25c25
< 
---
>    
28c28
< 
---
>    
31c31
< 
---
>    
36c36
< 
---
>    
41c41
< 
---
>    
44c44
< 
---
>    
47c47
< 
---
>    
50c50
< 
---
>    
53c53
< 
---
>    
56c56
< 
---
>    
59c59
<     * 
---
>     *
63,64c63,64
<    public void setAxisRange(Object min, 
<                             Object max)
---
>    public void setAxisRange(Object min,
>    Object max)
66c66,67
<       this.axisRange = (new Date[] { (Date) min, (Date) max });
---
>       this.axisRange = (new Date[]
>       { (Date) min, (Date) max });
68c69
< 
---
>    
71c72
<     * 
---
>     *
78c79
< 
---
>    
90c91
< 
---
>    
99,100c100,101
<              ? null
<              : (Text) constantTimeLabelFormat.clone();
---
>       ? null
>       : (Text) constantTimeLabelFormat.clone();
102c103
< 
---
>    
112c113
< 
---
>    
124c125
< 
---
>    
134c135
< 
---
>    
146c147
< 
---
>    
156,157c157,158
<    public void setGrid(Date initialPoint, 
<                        Long gridIncrement)
---
>    public void setGrid(Date initialPoint,
>    Long gridIncrement)
160,161c161,162
<                         .getName();
< 
---
>       .getName();
>       
166c167
< 
---
>       
171c172
< 
---
>       
175,176c176,177
<                                             + " gridIncrement.longValue()="
<                                             + gridIncrement.longValue());
---
>          + " gridIncrement.longValue()="
>          + gridIncrement.longValue());
178c179
< 
---
>       
183c184
< 
---
>    
194,196c195,197
<    public void setGrid(Date initialPoint, 
<                        Long gridIncrement, 
<                        Date finalPoint)
---
>    public void setGrid(Date initialPoint,
>    Long gridIncrement,
>    Date finalPoint)
199,200c200,201
<                         .getName();
< 
---
>       .getName();
>       
205c206
< 
---
>       
210c211
< 
---
>       
214,215c215,216
<                                             + " gridIncrement.longValue()="
<                                             + gridIncrement.longValue());
---
>          + " gridIncrement.longValue()="
>          + gridIncrement.longValue());
217c218
< 
---
>       
222c223
< 
---
>       
227c228
< 
---
>    
238,240c239,241
<    public void setGrid(Date initialPoint, 
<                        Integer intervalCount, 
<                        Date finalPoint)
---
>    public void setGrid(Date initialPoint,
>    Integer intervalCount,
>    Date finalPoint)
243,244c244,245
<                         .getName();
< 
---
>       .getName();
>       
249c250
< 
---
>       
254c255
< 
---
>       
259c260
< 
---
>       
264c265
< 
---
>    
274c275
< 
---
>    
284c285
< 
---
>    
294c295
< 
---
>    
306c307
< 
---
>    
316c317
< 
---
>    
328c329
< 
---
>    
338c339
< 
---
>    
357c358
< 
---
>    
366,367c367,368
<              ? (TimeZone) timeZone.clone()
<              : null;
---
>       ? (TimeZone) timeZone.clone()
>       : null;
369c370
< 
---
>    
380c381
< 
---
>          
382,383c383,391
<          clone.axisRange = (Date[]) this.axisRange.clone();
< 
---
>          if( axisRange != null)
>          {
>             clone.axisRange = (Date[]) this.axisRange.clone();
>          }
>          else
>          {
>             clone.axisRange = null;
>          }
>          
391c399
< 
---
>    
402c410
< 
---
>       
422c430
< 
---
>          
424,433c432,441
<                 && (Util.equals(initialPoint, other.initialPoint))
<                 && (Util.equals(finalPoint, other.finalPoint))
<                 && (Util.equals(gridIncrement, other.gridIncrement))
<                 && (Util.equals(intervalCount, other.intervalCount))
<                 && (Util.equals(firstTickMark, other.firstTickMark))
<                 && (Util.equals(timeZone, other.timeZone))
<                 && (Util.equals(tickLabelFormat, other.tickLabelFormat))
<                 && (Util.equals(constantTimeLabelFormat, 
<                                 other.constantTimeLabelFormat))
<                 && (Util.equals(tickIncrement, other.tickIncrement)));
---
>          && (Util.equals(initialPoint, other.initialPoint))
>          && (Util.equals(finalPoint, other.finalPoint))
>          && (Util.equals(gridIncrement, other.gridIncrement))
>          && (Util.equals(intervalCount, other.intervalCount))
>          && (Util.equals(firstTickMark, other.firstTickMark))
>          && (Util.equals(timeZone, other.timeZone))
>          && (Util.equals(tickLabelFormat, other.tickLabelFormat))
>          && (Util.equals(constantTimeLabelFormat,
>          other.constantTimeLabelFormat))
>          && (Util.equals(tickIncrement, other.tickIncrement)));
435c443
< 
---
>       
438c446
< 
---
>    
448c456
< }
---
> }
\ No newline at end of file
Index: DiscreteCategoryPlot.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/tree/DiscreteCategoryPlot.java,v
retrieving revision 1.11
diff -r1.11 DiscreteCategoryPlot.java
360c360
<          throw new Exception("None or one X data set is allowed for "
---
>          throw new Exception("Zero or one X data sets are required for "
Index: PageType.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/tree/PageType.java,v
retrieving revision 1.13
diff -r1.13 PageType.java
76c76,84
<       this.filename = arg;
---
>       // for some reason, if there are backslashes, R is not happy on the PC
>       if (arg.indexOf('\\') > 0)
>       {
>         this.filename = arg.replace('\\','/');
>       }
>       else
>       {
>         this.filename = arg;
>       }
Index: ScatterPlot.java
===================================================================
RCS file: /project/work3/mims/fwrep/mimsfw/gov/epa/mims/analysisengine/tree/ScatterPlot.java,v
retrieving revision 1.20
diff -r1.20 ScatterPlot.java
354c354
<                "A single X data set is allowed for a Scatter Plot, but "
---
>                "A single X data set is required for a Scatter Plot, but "
